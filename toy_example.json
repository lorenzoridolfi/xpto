{
    "task_description": "Generate a comprehensive text about {subject}",
    "hierarchy": [
        "CoordinatorAgent",
        "FileReaderAgent",
        "WriterAgent",
        "InformationVerifierAgent",
        "TextQualityAgent",
        "RootCauseAnalyzerAgent"
    ],
    "max_rounds": 5,
    "file_manifest": [
        {
            "filename": "input.txt",
            "description": "Main input file containing the subject matter"
        },
        {
            "filename": "reference.txt",
            "description": "Reference material for verification"
        },
        {
            "filename": "manifest_analysis.md",
            "description": "Critical analysis of the manifest files and system architecture"
        }
    ],
    "agents": {
        "CoordinatorAgent": {
            "description": "Coordinates the workflow between agents",
            "system_message": "You are a coordinator agent. Your role is to manage the workflow between different agents. You should instruct the FileReaderAgent to read files in a logical order, and ensure that the WriterAgent, InformationVerifierAgent, and TextQualityAgent work together effectively. Your goal is to produce high-quality, accurate content about {subject}."
        },
        "FileReaderAgent": {
            "description": "Reads and processes input files",
            "system_message": "You are a file reader agent. Your role is to read and process input files as instructed by the CoordinatorAgent. You should read files in the order specified and provide their contents to other agents."
        },
        "WriterAgent": {
            "description": "Generates content based on input",
            "system_message": "You are a writer agent. Your role is to generate high-quality content based on the input provided by the FileReaderAgent. You should focus on creating clear, engaging, and informative text about {subject}. IMPORTANT: Only use information that is explicitly present in the source files. Do not add information from your general knowledge unless it is also present in the source files."
        },
        "InformationVerifierAgent": {
            "description": "Validates information accuracy and source compliance",
            "system_message": "You are an information verifier agent. Your role is to validate the accuracy of the content generated by the WriterAgent. You must:\n1. Check if all information in the generated text is present in the source files\n2. Verify that no information was added from outside the source files\n3. Ensure there are no contradictions with the source material\n4. Validate that all claims are supported by the source files\n5. Check for any potential hallucinations or additions not present in the sources\n\nIf you find any issues, provide specific feedback about what information is not supported by the sources or contradicts them. If the content is accurate and fully supported by the sources, respond with 'TERMINATE'."
        },
        "TextQualityAgent": {
            "description": "Ensures content quality",
            "system_message": "You are a text quality agent. Your role is to evaluate the quality of the content generated by the WriterAgent. You should check for clarity, coherence, grammar, and overall writing quality. If you find any issues, provide specific feedback. If the content meets quality standards, respond with 'TERMINATE'."
        },
        "RootCauseAnalyzerAgent": {
            "description": "Analyzes feedback and system behavior",
            "system_message": "You are a root cause analyzer agent. Your role is to analyze the feedback provided by users and the behavior of the system. You should identify patterns, suggest improvements, and help optimize the system's performance."
        }
    },
    "output_files": {
        "agent_config": "agent_config.json",
        "agents_configuration": "agents_configuration.json",
        "root_cause": "root_cause.json"
    },
    "logging": {
        "level": "INFO",
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "file": "toy_example.log",
        "console": true
    },
    "llm_config": {
        "model": "gpt-4",
        "temperature": 0.7,
        "max_tokens": 4096,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0
    },
    "cache_config": {
        "use_gpu": true,
        "gpu_memory_fraction": 0.8,
        "batch_size": 32,
        "similarity_threshold": 0.85,
        "max_size": 1000,
        "expiration_hours": 24,
        "language": "en",
        "cleaning": {
            "mode": "expired",
            "min_similarity": 0.99,
            "max_age_hours": 48,
            "min_hits": 5,
            "max_size": 800
        }
    },
    "cache": {
        "enabled": true,
        "max_size": 1000,
        "ttl": 3600
    },
    "api": {
        "timeout": 30,
        "max_retries": 3,
        "retry_delay": 1
    },
    "performance": {
        "response_time_threshold": 5.0,
        "error_rate_threshold": 0.1,
        "cache_hit_ratio_threshold": 0.5,
        "memory_usage_threshold": 80
    },
    "max_iterations": 5,
    "analytics": {
        "enabled": true,
        "metrics": ["performance", "usage", "errors"]
    }
} 