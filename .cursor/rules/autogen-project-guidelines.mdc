---
description: 
globs: 
alwaysApply: false
---
---
description: General coding best practices for all projects and languages (global rule)
alwaysApply: true
---
- Follow the project's style guide and language-specific naming conventions for consistent code readability.
- Use a code formatter (e.g. Black) or linter (e.g. flake8) to enforce a consistent code style.
- Use descriptive names for variables, functions, and classes.
- Use type hints for function parameters and return types to improve code clarity and catch errors early.
- Follow DRY (Don't Repeat Yourself) and KISS (Keep It Simple) principles; avoid unnecessary complexity and duplication.
- Prefer reusing existing classes, functions, variables, and configurations from the `autogen_extensions` folder before creating new ones.
- Always implement robust and maintainable solutions; avoid cutting corners in your implementation.
- Write unit tests for new features and ensure tests cover core functionality and edge cases.
- Use mocks (mocked classes or functions) in tests only when absolutely necessary, and ensure they do not reduce test coverage.
- Always include or update docstrings for all functions, classes, and methods.
- Keep functions and modules small and focused; refactor them if they become too large or complex.
- Document any significant design decisions, assumptions, or trade-offs in code comments or project documentation.
- Avoid wildcard imports (e.g. `from module import *`); import only what is needed.
